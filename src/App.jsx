import React, { useState } from 'react';
import axios from 'axios';
import * as XLSX from 'xlsx';

const App = () => {
  const [input, setInput] = useState('');
  const [testCases, setTestCases] = useState([]);
  const [loading, setLoading] = useState(false);
  const [showGherkin, setShowGherkin] = useState(true);
  //const [scenarioCount, setScenarioCount] = useState(5); // Default to 5 scenarios


  const handleGenerate = async () => {
    if (!input.trim()) return;

    setLoading(true);
    try {
      const response = await axios.post(
        'https://test-case-backend.onrender.com/generate-test-cases',
        {
          input: `${input}\nPlease generate ${showGherkin ? 'Gherkin format' : 'Normal plain text'} test cases including positive, negative and edge cases with detailed steps.`
        }
      );

      const lines = response.data.output.split('\n');
const formattedLines = [];

lines.forEach((line, index) => {
  formattedLines.push(line);
  
  // Add space after Expected Result or end of test case block
  if (line.toLowerCase().startsWith('expected result')) {
    formattedLines.push(''); // Adds a blank line
  }

  // Optional: Add blank line between numbered cases
  if (/^\d+\.\s*(Positive|Negative|Edge)?\s*test case/i.test(line) && index !== 0) {
    formattedLines.push('');
  }
});

setTestCases(formattedLines);

     // setTestCases(outputLines);
    } catch (error) {
      console.error('Error:', error);
      setTestCases(['❌ Failed to generate test cases. Try again later.']);
    } finally {
      setLoading(false);
    }
  };

  const exportExcel = (data) => {
  const spacedData = [];

  data.forEach((line, index) => {
    if (line.trim().startsWith('Scenario:') && spacedData.length > 0) {
      spacedData.push(['']); // Add empty row before new Scenario
    }
    spacedData.push([line]);
  });

  const ws = XLSX.utils.aoa_to_sheet(spacedData);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, 'TestCases');
  XLSX.writeFile(wb, 'generated_test_cases.xlsx');
};

  return (
    <div className="min-h-screen bg-gray-900 text-white px-4 py-6 sm:px-8">
      <div className="max-w-4xl mx-auto space-y-6">
        <div className="flex items-center justify-center gap-4">
          <img src="/bk-icon.png" alt="Burger King Logo" className="h-12 w-12" />
          <h1 className="text-3xl font-bold text-center">Test Case Generator</h1>
        </div>

        <textarea
          className="w-full rounded-lg p-4 text-black text-sm sm:text-base resize-none"
          rows={10}
          placeholder="Paste acceptance criteria or feature description..."
          value={input}
          onChange={(e) => setInput(e.target.value)}
        />

        <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
          <button
            onClick={handleGenerate}
            className="bg-blue-600 hover:bg-blue-700 px-6 py-2 rounded shadow w-full sm:w-auto"
            disabled={loading}
          >
            {loading ? 'Generating...' : 'Generate Test Cases'}
          </button>

          <div className="flex items-center gap-2 text-sm">
            <label htmlFor="toggleGherkin" className="whitespace-nowrap">Gherkin Format</label>
            <input
              id="toggleGherkin"
              type="checkbox"
              checked={showGherkin}
              onChange={() => setShowGherkin(!showGherkin)}
              className="accent-yellow-400 w-5 h-5"
            />
          </div>
        </div>

        {testCases.length > 0 && (
          <div className="space-y-4 mt-6">
            <div className="text-green-400 font-semibold">
              ✅ Generated {showGherkin ? 'Gherkin' : 'Standard'} Test Cases:
            </div>

            <div className="bg-gray-800 rounded-lg p-4 overflow-auto max-h-[400px] whitespace-pre-wrap text-sm border border-gray-700">
              {testCases.map((line, index) => (
  <div
    key={index}
    className={line.trim().toLowerCase().startsWith('scenario:') ? 'mt-4 font-semibold' : ''}
  >
    {line}
  </div>
))}

            </div>

            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
              <p className="text-xs text-yellow-400">
                ⚠️ These test cases are generated by AI and might still make mistakes. Trust human intelligence for final review.
              </p>

              <button
                onClick={() => exportExcel(testCases)}
                className="bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded shadow-md"
              >
                📤 Export to Excel
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;